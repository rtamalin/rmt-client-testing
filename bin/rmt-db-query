#!/bin/bash

set -eu
if [[ -n "${TRACE:+true}" ]]; then
    set -vx
fi

cmdName=$(basename ${BASH_SOURCE[0]})
binDir=$(readlink -e $(dirname ${BASH_SOURCE[0]}))
repoDir=$(dirname ${binDir})
envFile=${repoDir}/.env

if [[ ! -r ${envFile} ]]; then
    echo "Ensure env is setup"
    exit 1
fi

. ${envFile}

if [[ -n "${RMT_CNTR:-}" ]]; then
    # Use docker if a container name is set
    runner=docker
else
    # Otherwise using SSH
    runner=ssh
fi

runnerArgs=()
dbCmdQuote=

case "${runner}" in
(docker)
    runnerArgs+=(
        exec
        -i
    )

    if [[ -t 0 ]]; then
        runnerArgs+=(
            -t
        )
    fi

    runnerArgs+=(
        ${RMT_CNTR}
    )
    ;;
(ssh)
    runnerArgs+=(
        ${RMT_USER:+${RMT_USER}@}${RMT_HOST}
    )
    # if starting an interactive session ensure a pty is setup
    if (( $# == 0 )); then
        runnerArgs+=( -ttt )
    fi
    # if specifying a DB command need to include extra quotes
    dbCmdQuote="'"
    ;;
(*)
    echo "ERROR: Not a supported runner: '${runner}'"
    exit 1
    ;;
esac

dbCmd=(
    env
    MYSQL_PWD="${MYSQL_PASSWORD}"
    mariadb
    -u "${MYSQL_USER}"
    -h "${MYSQL_HOST}"
    -D "${MYSQL_DATABASE}"
)

if [[ ! -t 0 ]]; then
  dbCmd+=( -t )
fi

if (( $# > 0 )); then
    # handle simple query vs flags being passed in
    if [[ "${1:0:1}" != "-" ]]; then
        dbCmd+=( -e ${dbCmdQuote} "${*}" ${dbCmdQuote} )
    else
        dbCmd+=( "${@}" )
    fi
fi

exec \
    ${DEBUG:+echo} \
    ${runner} \
    "${runnerArgs[@]}" \
    "${dbCmd[@]}"

# vim:shiftwidth=4:tabstop=4:expandtab
